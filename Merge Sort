#include <stdio.h>

// Merge function to merge two sorted halves
void merge(int arr[], int st, int mid, int end, int temp[]) {
    int i = st, j = mid + 1, k = 0;

    // Merge two sorted subarrays into temp[]
    while (i <= mid && j <= end) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
        }
    }

    // If there are remaining elements in the left half
    while (i <= mid) {
        temp[k++] = arr[i++];
    }

    // If there are remaining elements in the right half
    while (j <= end) {
        temp[k++] = arr[j++];
    }

    // Copy the merged elements back to the original array
    for (i = 0; i < k; i++) {
        arr[st + i] = temp[i];
    }
}

// Recursive function for Merge Sort
void mergesort(int arr[], int st, int end, int temp[]) {
    if (st < end) {
        int mid = (st + end) / 2;

        // Recursively divide the array into two halves
        mergesort(arr, st, mid, temp);
        mergesort(arr, mid + 1, end, temp);

        // Merge the two halves
        merge(arr, st, mid, end, temp);
    }
}

int main() {
    int arr[] = {7, 8, 5, 6, 3, 4, 2, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    int temp[n];  // Temporary array for merging

    printf("Original array: \n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    // Call mergesort
    mergesort(arr, 0, n - 1, temp);

    printf("\nSorted array: \n");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
